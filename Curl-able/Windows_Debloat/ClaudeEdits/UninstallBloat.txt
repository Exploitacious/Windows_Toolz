# Windows Bloatware Removal Script
# ================================
# This script performs the following tasks:
# 1. Elevates to admin privileges if necessary
# 2. Removes specified AppX packages for all users and from provisioned packages
# 3. Uninstalls specified MSI-based applications
#
# Note: This script requires administrative privileges to run.
# ================================

# Verify/Elevate Admin Session
if (!([Security.Principal.WindowsPrincipal][Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] "Administrator")) {
    Start-Process powershell.exe "-NoProfile -ExecutionPolicy Bypass -File `"$PSCommandPath`"" -Verb RunAs
    exit
}

# Determine OS architecture
$SoftwareList = @("SOFTWARE")
if ((Get-CimInstance Win32_OperatingSystem).OSArchitecture -eq "64-bit") {
    $SoftwareList += "SOFTWARE\Wow6432Node"
}

# Define bloatware lists
$AppxBloatList = @(
    "*562882FEEB491*", "*549981C3F5F10*", "*ActiproSoftware*", "*Alexa*", "*AIMeetingManager*",
    "*AdobePhotoshopExpress*", "*Advertising*", "*ArmouryCrate*", "*Asphalt*", "*ASUSPCAssistant*",
    "*AutodeskSketchBook*", "*BingNews*", "*BingSports*", "*BingTranslator*", "*BingWeather*",
    "*BubbleWitch3Saga*", "*CandyCrush*", "*Casino*", "*COOKINGFEVER*", "*CyberLink*",
    "*Disney*", "*Dolby*", "*DrawboardPDF*", "*Duolingo*", "*ElevocTechnology*",
    "*EclipseManager*", "*Facebook*", "*FarmVille*", "*Fitbit*", "*flaregames*",
    "*Flipboard*", "*GamingApp*", "*GamingServices*", "*GetHelp*", "*Getstarted*",
    "*HPPrinter*", "*iHeartRadio*", "*Instagram*", "*Keeper*", "*king.com*",
    "*Lenovo*", "*Lens*", "*LinkedInforWindows*", "*MarchofEmpires*", "*McAfee*",
    "*Messaging*", "*MirametrixInc*", "*Microsoft3DViewer*", "*MicrosoftOfficeHub*",
    "*MicrosoftSolitaireCollection*", "*Minecraft*", "*MixedReality*", "*MSPaint*",
    "*Netflix*", "*NetworkSpeedTest*", "*News*", "*OneConnect*", "*PandoraMediaInc*",
    "*People*", "*PhototasticCollage*", "*PicsArt-PhotoStudio*", "*Plex*", "*PolarrPhotoEditor*",
    "*PPIProjection*", "*Print3D*", "*Royal Revolt*", "*ScreenSketch*", "*Shazam*",
    "*SkypeApp*", "*SlingTV*", "*Spotify*", "*StickyNotes*", "*Sway*", "*MicrosoftTeams*",
    "*TheNewYorkTimes*", "*TuneIn*", "*Twitter*", "*Wallet*", "*WebExperience*",
    "*Whiteboard*", "*WindowsAlarms*", "*windowscommunicationsapps*", "*WindowsFeedbackHub*",
    "*WindowsMaps*", "*WindowsSoundRecorder*", "*WinZip*", "*Wunderlist*", "*Xbox.TCUI*",
    "*XboxApp*", "*XboxGameOverlay*", "*XboxGamingOverlay*", "*XboxIdentityProvider*",
    "*XboxSpeechToTextOverlay*", "*XING*", "*YourPhone*", "*ZuneMusic*", "*ZuneVideo*",
    "*TikTok*", "*ESPN*", "*Messenger*", "*Clipchamp*", "*whatsApp*", "*Prime*",
    "*Family*", "*copilot*", "*Mahjong*", "*viber*", "*Sidia*"
)

$MsiBloatList = @(
    "*mcafee*", "*livesafe*", "*Passportal*"
)

function Remove-AppxBloat {
    param (
        [string]$AppName
    )
    Write-Host "Removing AppX package: $AppName"
    Get-AppxPackage -Name $AppName -AllUsers | Remove-AppxPackage -AllUsers -ErrorAction SilentlyContinue -Verbose
    Get-AppxPackage -Name $AppName | Remove-AppxPackage -ErrorAction SilentlyContinue -Verbose
    Get-AppxProvisionedPackage -Online | Where-Object DisplayName -Like $AppName | Remove-AppxProvisionedPackage -Online -ErrorAction SilentlyContinue -Verbose
}

function Remove-MsiBloat {
    param (
        [string]$AppName
    )
    $EntryFound = $false
    foreach ($Software in $SoftwareList) {
        $RegistryPath = "HKLM:\$Software\Microsoft\Windows\CurrentVersion\Uninstall\*"
        $UninstallRegistryObjects = Get-ItemProperty $RegistryPath | Where-Object DisplayName -Like $AppName
        
        foreach ($UninstallRegistryObject in $UninstallRegistryObjects) {
            $EntryFound = $true
            $GUID = $UninstallRegistryObject.PSChildName
            Write-Host "Uninstalling $($UninstallRegistryObject.DisplayName) version $($UninstallRegistryObject.DisplayVersion)"
            Start-Process -Wait -FilePath "MsiExec.exe" -ArgumentList "/X $GUID /qn /norestart"
            Write-Host "Waiting for uninstallation to complete..."
            Start-Sleep -Seconds 20
        }
    }
    if (-not $EntryFound) {
        Write-Host "No match found for MSI application: $AppName"
    }
}

# Main execution
try {
    Write-Host "Starting bloatware removal process..." -ForegroundColor Green

    # Remove AppX Bloatware
    foreach ($App in $AppxBloatList) {
        Remove-AppxBloat -AppName $App
    }

    # Remove MSI-based Bloatware
    foreach ($App in $MsiBloatList) {
        Remove-MsiBloat -AppName $App
    }

    Write-Host "Bloatware removal process completed successfully." -ForegroundColor Green
}
catch {
    Write-Host "An error occurred during the bloatware removal process: $_" -ForegroundColor Red
}
finally {
    Read-Host -Prompt "Press Enter to exit"
}